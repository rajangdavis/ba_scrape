-- Grab LA Breweries
select name, zipcode from "Breweries" where CAST(split_part(zipcode,'-', 1) as INTEGER) in (90001,90021,90044,90077,90502,91330,91504,90002,90023,90045,90089,90710,91331,91505,90003,90024,90046,90094,90717,91335,91601,90004,90025,90047,90095,90731,91340,91602,90005,90026,90048,90210,90732,91342,91604,90005,90027,90049,90211,90732,91343,91605,90006,90028,90056,90212,90744,91344,91606,90007,90029,90057,90230,90810,91345,91607,90008,90031,90058,90232,91040,91352,91608,90010,90032,90059,90245,91042,91356,90011,90033,90061,90247,91214,91364,90012,90034,90062,90248,91303,91367,90013,90035,90063,90272,91304,91401,90014,90036,90064,90290,91306,91402,90015,90037,90065,90291,91307,91403,90016,90038,90066,90292,91311,91405,90017,90039,90067,90293,91316,91406,90018,90041,90068,90302,91324,91411,90019,90042,90069,90402,91325,91423,90020,90043,90071,90501,91326,91436);

-- Grab beers, brewery name and style from "The Bruery"
SELECT "Beers".name as beer_name, "Breweries".name as brewery_name, "Styles".name FROM "Beers","Breweries", "Styles" WHERE "Beers".brewery_link = "Breweries".ba_link AND "Beers".style_link = "Styles".ba_link AND "Breweries".name LIKE '%Bruery%';

-- Grab beers, brewery name and style from Breweries in LA
SELECT "Beers".name as beer_name, "Breweries".name as brewery_name, "Styles".name FROM "Beers","Breweries", "Styles" WHERE "Beers".brewery_link = "Breweries".ba_link AND "Beers".style_link = "Styles".ba_link AND CAST(split_part("Breweries".zipcode,'-', 1) as INTEGER) in (90001,90021,90044,90077,90502,91330,91504,90002,90023,90045,90089,90710,91331,91505,90003,90024,90046,90094,90717,91335,91601,90004,90025,90047,90095,90731,91340,91602,90005,90026,90048,90210,90732,91342,91604,90005,90027,90049,90211,90732,91343,91605,90006,90028,90056,90212,90744,91344,91606,90007,90029,90057,90230,90810,91345,91607,90008,90031,90058,90232,91040,91352,91608,90010,90032,90059,90245,91042,91356,90011,90033,90061,90247,91214,91364,90012,90034,90062,90248,91303,91367,90013,90035,90063,90272,91304,91401,90014,90036,90064,90290,91306,91402,90015,90037,90065,90291,91307,91403,90016,90038,90066,90292,91311,91405,90017,90039,90067,90293,91316,91406,90018,90041,90068,90302,91324,91411,90019,90042,90069,90402,91325,91423,90020,90043,90071,90501,91326,91436);

-- Grab beers from breweries in California, Illinios, and Minnesota
SELECT "Beers".name as beer_name, "Beers".ba_link as beer_link, "Beers".rating_counts FROM "Beers","Breweries" WHERE "Beers".brewery_link = "Breweries".ba_link  AND "Breweries".state IN ('California', 'Illinios', 'Minnesota');


-- Grab 10 closest breweries to GA
SELECT ST_Distance(ST_GeomFromText('POINT(34.01080683333333 -118.4922238333333)', 4326),ST_GeomFromText(ST_AsText(position), 4326)) * 100 as distance, ST_AsText(position) as position, name, city, state, ba_link from "Breweries" WHERE position is not null ORDER BY distance limit 10;

-- Grab the beers with styles from breweries within degrees
SELECT ST_Distance(ST_GeomFromText('POINT(34.01080683333333 -118.4922238333333)', 4326), ST_GeomFromText(ST_AsText(position), 4326)) as distance, "Beers".name as beer_name, "Breweries".name as brewery_name, "Styles".name from "Beers","Breweries", "Styles" WHERE "Beers".brewery_link = "Breweries".ba_link AND "Beers".style_link = "Styles".ba_link AND "Breweries".position is not null AND ST_DWithin(ST_GeomFromText('POINT(34.01080683333333 -118.4922238333333)', 4326),ST_GeomFromText(ST_AsText(position), 4326), .15) ORDER BY distance;

-- Grab the beers with styles from breweries within 5 miles
SELECT ST_Distance((ST_GeomFromText('POINT(34.01080683333333 -118.4922238333333)', 4326))::geography, (ST_GeomFromText(ST_AsText(position), 4326))::geography)/1609.345 as distance, "Beers".name as beer_name, "Breweries".name as brewery_name, "Styles".name from "Beers","Breweries", "Styles" WHERE "Beers".brewery_link = "Breweries".ba_link AND "Beers".style_link = "Styles".ba_link AND "Breweries".position is not null AND ST_DWithin(ST_GeomFromText('POINT(34.01080683333333 -118.4922238333333)', 4326)::geography,ST_GeomFromText(ST_AsText(position), 4326)::geography, (5 * 1609.345)) ORDER BY distance;


-- Grab the beers with styles from breweries 10 miles as the crow flies
-- Near Cerritos
-- that have scores greater than 3.5
SELECT 
ST_Distance((ST_GeomFromText('POINT(33.8548734 -118.06258630000002)', 4326)), (ST_GeomFromText(ST_AsText(position), 4326)))*57.884 as distance, 
"Beers".name as beer_name, 
"Beers".total_score, 
"Breweries".name as brewery_name, 
"Styles".name 
FROM "Beers","Breweries", "Styles" 
WHERE "Beers".brewery_link = "Breweries".ba_link 
AND "Beers".style_link = "Styles".ba_link 
AND "Breweries".position is not null 
AND ST_DWithin(ST_GeomFromText('POINT(33.8548734 -118.06258630000002)', 4326),ST_GeomFromText(ST_AsText(position), 4326), 10/57.884) 
AND "Beers".total_score > 3.5
ORDER BY distance;

-- Grab the beers with styles from breweries 10 miles as the crow flies
-- Near Cerritos
-- that have scores greater than 3.5
-- and are either Stouts or IPA's

SELECT ST_Distance((ST_GeomFromText('POINT(33.8548734 -118.06258630000002)', 4326)), (ST_GeomFromText(ST_AsText(position), 4326)))*57.884 as distance, "Beers".name as beer_name, "Beers".total_score, "Breweries".name as brewery_name, "Styles".name FROM "Beers","Breweries", "Styles" WHERE "Beers".brewery_link = "Breweries".ba_link AND "Beers".style_link = "Styles".ba_link AND "Breweries".position is not null AND ST_DWithin(ST_GeomFromText('POINT(33.8548734 -118.06258630000002)', 4326),ST_GeomFromText(ST_AsText(position), 4326), 10/57.884) AND "Beers".total_score > 3.5 AND ("Styles".name LIKE '%Pale Ale%' OR "Styles".name LIKE '%Stout%') ORDER BY distance ASC, total_score DESC;


-- Grab the beers with styles from breweries 10 miles (rounded) as the crow flies
-- Near Santa Monica
-- that have scores greater than 3.5
-- and are either Stouts or IPA's

SELECT ST_Distance((ST_GeomFromText('POINT(34.01080683333333 -118.4922238333333)', 4326)), (ST_GeomFromText(ST_AsText(position), 4326)))*57.884 as distance, "Beers".name as beer_name, "Beers".total_score, "Breweries".name as brewery_name, "Styles".name FROM "Beers","Breweries", "Styles" WHERE "Beers".brewery_link = "Breweries".ba_link AND "Beers".style_link = "Styles".ba_link AND "Breweries".position is not null AND ST_DWithin(ST_GeomFromText('POINT(34.01080683333333 -118.4922238333333)', 4326),ST_GeomFromText(ST_AsText(position), 4326), 10/57.884) AND "Beers".total_score > 3.5 AND ("Styles".name LIKE '%Pale Ale%' OR "Styles".name LIKE '%Stout%') ORDER BY distance ASC, total_score DESC;


-- Get the list of all of the beers
-- number of ratings
-- number of pages of ratings to scrape
-- from breweries in California, Illinois, and Minnesota
-- sorted by number of ratings and then 
-- brewery closest to Santa Monica
\copy (SELECT "Beers".name as beer_name, "Beers".ba_link as beer_link, CAST("Beers".rating_counts AS INT) as rating_counts, (CASE WHEN CAST("Beers".rating_counts AS INT) <= 25 THEN 1 ELSE CAST("Beers".rating_counts AS INT)/25 + CAST("Beers".rating_counts AS INT)%25 END), "Breweries".state as state FROM "Beers","Breweries" WHERE "Beers".brewery_link = "Breweries".ba_link AND "Breweries".position is not null AND "Breweries".state IN ('California', 'Illinios', 'Minnesota') ORDER BY rating_counts DESC) TO 'C:\Users\rajan\Desktop\ba_scrape\scrape_extract_data\test.csv' WITH CSV DELIMITER ',' HEADER;




-- BASIC NLP WITH SQL
-- 1. Get counts of words from corpus
-- https://stackoverflow.com/questions/5226202/word-frequencies-from-strings-in-postgres
SELECT word, count(*) FROM ( SELECT regexp_split_to_table(description, '\s') as word FROM "Styles" ) t GROUP BY word;

-- 2. Remove stop words
-- https://gist.githubusercontent.com/sebleier/554280/raw/7e0e4a1ce04c2bb7bd41089c9821dbcf6d0c786c/NLTK's%2520list%2520of%2520english%2520stopwords
SELECT word, count(*) FROM ( SELECT regexp_split_to_table(description, '\s') AS word FROM "Styles" ) t WHERE lower(word) NOT IN ( 'i','me','my','myself','we','our','ours','ourselves','you','your','yours','yourself','yourselves','he','him','his','himself','she','her','hers','herself','it','its','itself','they','them','their','theirs','themselves','what','which','who','whom','this','that','these','those','am','is','are','was','were','be','been','being','have','has','had','having','do','does','did','doing','a','an','the','and','but','if','or','because','as','until','while','of','at','by','for','with','about','against','between','into','through','during','before','after','above','below','to','from','up','down','in','out','on','off','over','under','again','further','then','once','here','there','when','where','why','how','all','any','both','each','few','more','most','other','some','such','no','nor','not','only','own','same','so','than','too','very','s','t','can','will','just','don','should','now') GROUP BY word ORDER BY count DESC;

-- 3. Do a comparison of lowercased words; also remove blank terms
-- https://www.postgresql.org/docs/9.1/static/functions-string.html
SELECT word, count(*) FROM ( SELECT regexp_split_to_table(description, '\s') AS word FROM "Styles" ) t WHERE lower(word) NOT IN ( 'i','me','my','myself','we','our','ours','ourselves','you','your','yours','yourself','yourselves','he','him','his','himself','she','her','hers','herself','it','its','itself','they','them','their','theirs','themselves','what','which','who','whom','this','that','these','those','am','is','are','was','were','be','been','being','have','has','had','having','do','does','did','doing','a','an','the','and','but','if','or','because','as','until','while','of','at','by','for','with','about','against','between','into','through','during','before','after','above','below','to','from','up','down','in','out','on','off','over','under','again','further','then','once','here','there','when','where','why','how','all','any','both','each','few','more','most','other','some','such','no','nor','not','only','own','same','so','than','too','very','s','t','can','will','just','don','should','now') GROUP BY word ORDER BY count DESC;

-- 4. Remove punctuation and spaces
-- https://www.tutorialspoint.com/How-to-remove-all-special-characters-punctuation-and-spaces-from-a-string-in-Python
SELECT word, count(*) FROM ( SELECT regexp_split_to_table(description, '[^A-Za-z0-9]+') AS word FROM "Styles" ) t WHERE lower(word) NOT IN ( 'i','me','my','myself','we','our','ours','ourselves','you','your','yours','yourself','yourselves','he','him','his','himself','she','her','hers','herself','it','its','itself','they','them','their','theirs','themselves','what','which','who','whom','this','that','these','those','am','is','are','was','were','be','been','being','have','has','had','having','do','does','did','doing','a','an','the','and','but','if','or','because','as','until','while','of','at','by','for','with','about','against','between','into','through','during','before','after','above','below','to','from','up','down','in','out','on','off','over','under','again','further','then','once','here','there','when','where','why','how','all','any','both','each','few','more','most','other','some','such','no','nor','not','only','own','same','so','than','too','very','s','t','can','will','just','don','should','now','') GROUP BY word ORDER BY count DESC;

-- 5. Group by word and style
-- https://www.postgresql.org/docs/10/static/datatype-textsearch.html
-- https://www.compose.com/articles/mastering-postgresql-tools-full-text-search-and-phrase-search/
SELECT s.name AS style, to_tsvector(description) as word FROM "Styles" s GROUP BY word, style;

-- 6. Search by terms
SELECT s.name AS style FROM "Styles" s WHERE to_tsvector(description) @@ to_tsquery('malt & hops & chocolate & coffee') IS TRUE GROUP BY style;